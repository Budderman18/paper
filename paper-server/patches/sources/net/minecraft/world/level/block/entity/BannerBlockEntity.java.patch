--- a/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -50,7 +_,7 @@
     @Override
     protected void saveAdditional(ValueOutput valueOutput) {
         super.saveAdditional(valueOutput);
-        if (!this.patterns.equals(BannerPatternLayers.EMPTY)) {
+        if (!this.patterns.equals(BannerPatternLayers.EMPTY) || serialisingForNetwork.get()) { // Paper - always send patterns to client
             valueOutput.store("patterns", BannerPatternLayers.CODEC, this.patterns);
         }
 
@@ -61,7 +_,7 @@
     protected void loadAdditional(ValueInput valueInput) {
         super.loadAdditional(valueInput);
         this.name = parseCustomNameSafe(valueInput, "CustomName");
-        this.patterns = valueInput.read("patterns", BannerPatternLayers.CODEC).orElse(BannerPatternLayers.EMPTY);
+        this.setPatterns(valueInput.read("patterns", BannerPatternLayers.CODEC).orElse(BannerPatternLayers.EMPTY)); // CraftBukkit - apply limits
     }
 
     @Override
@@ -69,9 +_,18 @@
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
+    // Paper start - always send patterns to client
+    ThreadLocal<Boolean> serialisingForNetwork = ThreadLocal.withInitial(() -> Boolean.FALSE);
     @Override
     public CompoundTag getUpdateTag(HolderLookup.Provider registries) {
+        final Boolean wasSerialisingForNetwork = serialisingForNetwork.get();
+        try {
+            serialisingForNetwork.set(Boolean.TRUE);
         return this.saveWithoutMetadata(registries);
+        } finally {
+            serialisingForNetwork.set(wasSerialisingForNetwork);
+        }
+    // Paper end - always send patterns to client
     }
 
     public BannerPatternLayers getPatterns() {
@@ -91,7 +_,7 @@
     @Override
     protected void applyImplicitComponents(DataComponentGetter componentGetter) {
         super.applyImplicitComponents(componentGetter);
-        this.patterns = componentGetter.getOrDefault(DataComponents.BANNER_PATTERNS, BannerPatternLayers.EMPTY);
+        this.setPatterns(componentGetter.getOrDefault(DataComponents.BANNER_PATTERNS, BannerPatternLayers.EMPTY)); // CraftBukkit - apply limits
         this.name = componentGetter.get(DataComponents.CUSTOM_NAME);
     }
 
@@ -107,4 +_,13 @@
         valueOutput.discard("patterns");
         valueOutput.discard("CustomName");
     }
+
+    // CraftBukkit start
+    public void setPatterns(BannerPatternLayers bannerPatternLayers) {
+        if (bannerPatternLayers.layers().size() > 20) {
+            bannerPatternLayers = new BannerPatternLayers(java.util.List.copyOf(bannerPatternLayers.layers().subList(0, 20)));
+        }
+        this.patterns = bannerPatternLayers;
+    }
+    // CraftBukkit end
 }
